<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:p="http://www.springframework.org/schema/p" xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context" xmlns:mvc="http://www.springframework.org/schema/mvc"
    xmlns:cache="http://www.springframework.org/schema/cache"
    xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache-3.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd">

    <!--
   1.配置securityManager！
     -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <!--<property name="cacheManager" ref="cacheManager"/>-->
        <property name="authenticator" ref="authenticator"/>
        <property name="realms">
        	<list>
    			<ref bean="jdbcRealm"/>
    			<!-- <ref bean="secondRealm"/> -->
    		</list>
        </property>
        <property name="rememberMeManager.cookie.maxAge" value="30"></property>
    </bean>

    <!-- Let's use some enterprise caching support for better performance.  You can replace this with any enterprise
         caching framework implementation that you like (Terracotta+Ehcache, Coherence, GigaSpaces, etc -->
    <!-- 
    2.配置CacheManager
    2.1需要加入ehcache的jar包及配置文件
     -->
    
   <!--<bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
        <
        <property name="cacheManagerConfigFile" value="classpath:ehcache.xml"/>
        
    </bean>-->
	
	<bean id="authenticator" class="org.apache.shiro.authc.pam.ModularRealmAuthenticator">
		
		<property name="authenticationStrategy">
			<bean class="org.apache.shiro.authc.pam.AtLeastOneSuccessfulStrategy"></bean>
		</property>
	</bean>
    <!-- Used by the SecurityManager to access security data (users, roles, etc).
         Many other realm implementations can be used too (PropertiesRealm,
         LdapRealm, etc. -->
      <!-- 
      3.配置Realm
      3.1直接配置实现了org.apache.shiro.realm.Realm接口的bean 
      -->
    <bean id="jdbcRealm" class="qs.classhelper.shiro.realm.ShiroRealm">
        <property name="credentialsMatcher">
        	
        	
        	 <bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
        		<property name="hashAlgorithmName" value="MD5"></property>
        		<property name="hashIterations" value="1024"></property>
        	</bean>
        </property>
    </bean>

	<!-- <bean id="secondRealm" class="com.shiro.realms.SecondRealm">
        <property name="credentialsMatcher">
        	<bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
        		<property name="hashAlgorithmName" value="SHA1"></property>
        		<property name="hashIterations" value="1024"></property>
        	</bean>
        </property>
    </bean> -->
    <!-- =========================================================
         Shiro Spring-specific integration
         ========================================================= -->
    <!-- Post processor that automatically invokes init() and destroy() methods
         for Spring-configured Shiro objects so you don't have to
         1) specify an init-method and destroy-method attributes for every bean
            definition and
         2) even know which Shiro objects require these methods to be
            called. -->
    <!-- 
    4.配置lifecycleBeanPostProcessor可以自定的来调用配置在spring IOC容器中shiro bean的生命周期方法
     -->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

    <!-- Enable Shiro Annotations for Spring-configured beans.  Only run after
         the lifecycleBeanProcessor has run: -->
    <!-- 
    5.启用IOC容器中使用shiro的注解，但必须在配置了lifecycleBeanPostProcessor后才可以使用
     -->
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
          depends-on="lifecycleBeanPostProcessor">
    	<property name="proxyTargetClass" value="true" />      
    </bean>
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>


    <!-- Define the Shiro Filter here (as a FactoryBean) instead of directly in web.xml -
         web.xml uses the DelegatingFilterProxy to access this bean.  This allows us
         to wire things with more control as well utilize nice Spring things such as
         PropertiesPlaceholderConfigurer and abstract beans or anything else we might need: -->
    <!-- 
    6.配置shiroFilter 
    6.1 id必须和web.xml文件中配置的DeligatingFilterProxy的<filter-name>一致
    	若不一致，则会抛出:NoSuchBeanDefinitionException,因为shiro会来ioc容器中查找和<filter-name>名字对应的 filter bean
    -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"/>
        <property name="loginUrl" value="/login.jsp"/>
        <property name="successUrl" value="/index.jsp"/>
        <property name="unauthorizedUrl" value="/unauthorized.jsp"/>
        
       <!--  <property name="filterChainDefinitionMap" ref="filterChainDefinitionMap"></property>-->
        <!-- 
		        配置哪些页面需要受保护，
		        以及访问这些页面需要的权限
		    1）.anon可以被匿名访问
         	2）.authc 必须认证（即登录）后才可以访问的页面
         	3）.logout 登出
         	4） .roles 角色过滤器-->
        
     <property name="filterChainDefinitions">
            <value>
            	/css/** = anon
				/js/** = anon
				/img/** = anon
				/code.jsp = anon
            	/login.jsp = anon
            	/login.s = anon
                /logout.s = logout
                
                # everything else requires authentication:
                /** = authc
            </value>
        </property>
    </bean>
    <!-- 配置一个bean,该bean实际上是一个Map.通过实力工厂的方式 
     <bean id="filterChainDefinitionMap" factory-bean="filterChainDefinitionMapBuilder" factory-method="buildFilterChainDefinitionMap"></bean>
    
    <bean id="filterChainDefinitionMapBuilder" class="com.shiro.factory.FilterChainDefinitionMapBuilder">
    
    </bean>-->
    <!--扫描所有shiro注解的文件-->  
	   <context:component-scan base-package="action">  
	               <context:exclude-filter type="annotation"  
	                 expression="org.springframework.stereotype.Controller" />  
	   </context:component-scan>  
</beans>